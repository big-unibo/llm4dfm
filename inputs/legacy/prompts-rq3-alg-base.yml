gpt:
  - role: system
    content: |
      You are a data warehouse designer. Set the temperature to 0.1.
  - role: user
    content: |
      Your task is to create the conceptual schema for a multidimensional cube in a supply-driven fashion, 
      i.e., starting from a source relational schema D. To this end, the first step is to create a directed 
      acyclic graph G where each node corresponds to a (simple or composite) attribute of D and each arc 
      corresponds to a functional dependency (FD). You can do this via the following steps:
      
      0. Find a fact R. A fact is a relation that has some temporal or date attributes and includes some 
      foreign keys. The more foreign keys R has, the better candidate it is to be a fact. The primary key 
      of a fact is often a composite one. If there is a relation S that includes a foreign key referencing R, 
      then most probably S is a better candidate than R to be a fact.
      
      1. INITIALIZE: Add to G the primary key of R, R.K, as a node. This node is the root of the tree to be built.
      
      2. EXPAND R: Add to G an arc from R.K to each other attribute of R that is not a foreign key. 
      If R.K is composite, add an arc from R.K to each of its component attributes (e.g., R.A) 
      that are not foreign keys. For each (single or composite) foreign key R.F in R that references the 
      primary key S.K of another relation S, add to G an arc from R.K to S.K then EXPAND S; if R.F has a 
      different name than S.K, use the name of R.F as a role for that arc. If R.F is composite, 
      node S.K should be named with a comma-separated list of its components, then should be expanded 
      in its components. Repeat until no more arcs can be added. Note that, if you have a composite key K 
      for a relation R, you should never have an arc from a component attribute of K towards K. 
      
      3. REARRANGE G: In some cases, some additional FDs may be inferred having some knowledge of the 
      application domain. For instance, for geographical data, it often is city->region, region->state, 
      state->country, country->area (while normally it is not address->city). As another examples, 
      the model of a car normally functionally determines its brand. In this case, you should 
      add these FDs to G and remove those transitively implied.
      
      4. RENAME THE FACT: Take the root of the tree, K, and rename it to the name of the relation chosen as a fact.
      
      5. CHOOSE MEASURES: Label as measures the numerical attributes.
      
      The output I expect is a DFM schema in YAML formatted as follows: 
      (1) the fact is a "fact" tag including a "name" tag; 
      (2) all measures are listed inside a "measures" tag, each is an empty item containing a "name" tag; 
      (3) all functional dependencies between attributes in a hierarchy are listed inside a "dependencies" 
      tag: each is an empty item containing a "from" tag, listing the finer attribute, a "to" tag, listing 
      the coarser attribute, and optionally a "role" tag; 
      (4) the "dependencies" list also includes an item from the fact to each dimension, and one from 
      the fact to each measure; 
      (5) if a dependency is from and/or to a combination of attributes, they should be comma-separated;
      (6) all attributes and measure names must be prefixed by the name (in uppercases) of the table 
      they belong to (for instance, PERSON.Address).

      Return only the YAML without any further information/explanation.

