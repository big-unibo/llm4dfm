gpt:
  - role: system
    content: |
      You are a data warehouse designer. Set the temperature to 0.1. You must carry out supply-driven conceptual
      design of a multidimensional cube using the DFM (Dimensional Fact Model), starting from the following
      source relational schema. 
      The output I expect is a DFM schema in YAML formatted as follows: 
      (1) the fact is a "fact" tag including a "name" tag; 
      (2) all measures are listed inside a "measures" tag, each is an empty item containing a "name" tag; 
      (3) all functional dependencies between attributes in a hierarchy are listed inside a "dependencies" tag: 
      each is an empty item containing a "from" tag, listing the finer attribute(s), and a "to" tag, 
      listing the coarser attribute(s); 
      (4) the "dependencies" list also includes an item from the fact to each dimension, and one from 
      the fact to each measure; 
      (5) if a dependency is from and/or to a combination of attributes, they should be comma-separated;
      (6) all attributes and measure names must be prefixed by the name (in uppercases) of the table 
      they belong to (for instance, PERSON.Address).
  - role: user
    content: |
      The following logical schema describes an operational database for purchases.

      CREATE TABLE TYPES (
          typeId INT PRIMARY KEY,
          typeName VARCHAR(100)
      );

      CREATE TABLE ARTICLES (
          artId INT PRIMARY KEY,
          artName VARCHAR(100),
          unitPrice FLOAT,
          type INT,
          FOREIGN KEY (type) REFERENCES TYPES(typeId)
      );

      CREATE TABLE REGIONS (
          regId INT,
          regionName VARCHAR(100),
          state VARCHAR(100),
          country VARCHAR(100),
          PRIMARY KEY (regId, state)
      );

      CREATE TABLE STORES (
          storeId INT PRIMARY KEY,
          storeName VARCHAR(100),
          storeAddress VARCHAR(100),
          regId INT,
          state VARCHAR(100),
          FOREIGN KEY (regId, state) REFERENCES REGIONS(regId, state)
      );

      CREATE TABLE PURCHASE (
          storeId INT,
          artId INT,
          date DATE,
          quantity INT,
          revenue FLOAT,
          PRIMARY KEY (storeId, artId, date),
          FOREIGN KEY (artId) REFERENCES ARTICLES(artId),
          FOREIGN KEY (storeId) REFERENCES STORES(storeId)
      );

      Return only the YAML of the DFM schema without any further information/explanation.  
  - role: assistant
    content: |  
      fact:
        name: PURCHASE
      measures:
        - name: PURCHASE.quantity
        - name: PURCHASE.revenue
        - name: ARTICLES.unitPrice
      dependencies:
        - from: TYPES.typeId
          to: TYPES.typeName
        - from: ARTICLES.artId
          to: ARTICLES.artName
        - from: ARTICLES.artId
          to: TYPES.typeId
          role: type
        - from: REGIONS.regId, REGIONS.state
          to: REGIONS.regionName
        - from: REGIONS.regId, REGIONS.state
          to: REGIONS.state
        - from: REGIONS.state
          to: REGIONS.country
        - from: STORES.storeId
          to: STORES.storeName
        - from: STORES.storeId
          to: STORES.storeAddress
        - from: STORES.storeId
          to: REGIONS.regId, REGIONS.state
        - from: PURCHASE
          to: PURCHASE.quantity
        - from: PURCHASE
          to: PURCHASE.revenue
        - from: PURCHASE
          to: ARTICLES.unitPrice
        - from: PURCHASE
          to: ARTICLES.artId
        - from: PURCHASE
          to: STORES.storeId
        - from: PURCHASE
          to: PURCHASE.date