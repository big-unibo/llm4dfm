gpt:
  - role: system
    content: |
      You are a data warehouse designer. Set the temperature to 0.1.
  - role: user
    content: |
      Your task is to create the conceptual schema for a multidimensional cube in a 
      demand-driven fashion, i.e., starting from the end-user requirements, using the DFM. 
      To this end, keep in mind that a DFM is a connected graph where the fact is a 
      node in which no arcs enter. The fact is a business phenomenon the users wish to 
      analyze, e.g., sales, purchases, rentals, shipments. The arcs exiting the fact lead 
      either to measures (always numerical) or to dimensions (always categorical). 
      The arcs within a hierarchy are always directed from the finer attribute towards 
      the coarser one (e.g., date->month->year, product->category, 
      store->city->region->state->country->area). This means that there is an arc from 
      attribute “a” to attribute “b” when one member of “a” is related to one member of “b”, 
      while one member of “b” is related to many members of “a”.
      When you have the same concept used twice or more (e.g., “delivery date” and 
      “shipment date”; “city of birth” and “city of residence”), instead of keeping these 
      attributes separate, you should create two or more arcs reaching a single node 
      (“date”; “city”) and add roles to the arcs (“delivery” and “shipment”; “birth” and 
      “residence”). When the requirements specify that a concept is identified by an attribute 
      (e.g., “Articles are identified by a code”), do not create a node for the concept 
      (“article”) but only for the identifier (“article code”).

      The output I expect is a DFM schema in YAML formatted as follows: 
      (1) the fact is a “fact” tag including a “name” tag; 
      (2) all measures are listed inside a "measures" tag, each is an empty item containing 
      a "name" tag; 
      (3) all many-to-one relationships between attributes in a hierarchy are listed inside 
      a "dependencies" tag: each is an empty item containing a "from" tag, listing the finer 
      attribute, a "to" tag, listing the coarser attribute, and optionally a "role" tag; 
      (4) the “dependencies” list also includes an item from the fact to each dimension, 
      and one from the fact to each measure.

      For instance, let these requirements be given:
      Decision-makers are interested in analyzing, in terms of quantity and cost, the shipments 
      of articles made from a warehouse to another warehouse on a day-by-day basis. 
      A warehouse has a unique name, an address, and is located in a region of a state (each 
      state is part of one country). Articles are identified by a code and described by their 
      names and their types.

      Here, SHIPMENT is the fact, while quantity and cost are numerical measures. 
      Article code, warehouse, and day are dimensions. Since two warehouses are involved, 
      there are two arcs from SHIPMENT to warehouse, with roles “from” and “to”, respectively. 
      There are arcs from warehouse to name, address, and region; from region to state and 
      from state to country. There are arcs from article code to article name and type.

      The YAML expression of the DFM schema obtained is the following:

      fact:
        name: SHIPMENT
      measures:
        - name: quantity
        - name: cost
      dependencies:
        - from: articleCode
          to: articleName
        - from: articleCode
          to: type
        - from: warehouse
          to: warehouseName
        - from: warehouse
          to: warehouseAddress
        - from: warehouse
          to: region
        - from: region
          to: state
        - from: state
          to: country
        - from: SHIPMENT
          to: quantity
        - from: SHIPMENT
          to: cost
        - from: SHIPMENT
          to: articleCode
        - from: SHIPMENT
          to: warehouse
          role: from
        - from: SHIPMENT
          to: warehouse
          role: to
        - from: SHIPMENT
          to: date

      Return only the YAML without any further information/explanation.